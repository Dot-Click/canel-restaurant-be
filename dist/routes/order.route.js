"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.orderRoutes = void 0;
const order_controller_1 = require("../controllers/order.controller");
const auth_middleware_1 = require("../middlewares/auth.middleware");
const checkpermission_middleware_1 = require("../middlewares/checkpermission.middleware");
const express_1 = require("express");
const orderRoutes = (0, express_1.Router)();
exports.orderRoutes = orderRoutes;
orderRoutes.post("/create-order", auth_middleware_1.protectRoute, (0, checkpermission_middleware_1.checkPermission)("add order"), order_controller_1.insertController);
orderRoutes.post("/delete-order/:id", auth_middleware_1.protectRoute, (0, checkpermission_middleware_1.checkPermission)("delete order"), order_controller_1.deleteController);
orderRoutes.post("/create-pos-order", auth_middleware_1.protectRoute, (0, checkpermission_middleware_1.checkPermission)("add pos"), order_controller_1.createPosOrderController);
orderRoutes.patch("/:id", auth_middleware_1.protectRoute, (0, checkpermission_middleware_1.checkPermission)("update order"), order_controller_1.updateController);
orderRoutes.patch("/:id/assign-rider", (0, checkpermission_middleware_1.checkPermission)("update order"), order_controller_1.assignRiderController);
orderRoutes.patch("/:orderId/accept", auth_middleware_1.protectRoute, order_controller_1.acceptOrderController);
orderRoutes.get("/:riderId/orders", auth_middleware_1.protectRoute, order_controller_1.getOrdersByRiderIdController);
orderRoutes.get("/me/orders", auth_middleware_1.protectRoute, order_controller_1.getRiderOrdersController);
orderRoutes.get("/fetch-order", auth_middleware_1.protectRoute, order_controller_1.fetchController);
orderRoutes.get("/user-orders/:id", auth_middleware_1.protectRoute, order_controller_1.getOrderByIdController);
